#!/usr/bin/env python3
# Copyright (C) 2019-2024 Intel Corporation
# SPDX-License-Identifier: BSD-3-Clause
"""
This script is the main executable of Code Base Investigator.
"""

import argparse
import logging
import os
import sys
import warnings

from codebasin import config, finder, report, util
from codebasin.walkers.platform_mapper import PlatformMapper

version = "1.2.0"


def guess_project_name(config_path):
    """
    Guess a useful name from the given path so that we can pick
    meaningful filenames for output.
    """
    fullpath = os.path.realpath(config_path)
    (thedir, thename) = os.path.split(fullpath)
    if config_path == "config.yaml":
        (base, end) = os.path.split(thedir)
        res = end.strip()
    else:
        (base, end) = os.path.splitext(thename)
        res = base.strip()
    if not res:
        logging.getLogger("codebasin").warning(
            "Can't guess meaningful output name from input",
        )
        res = "unknown"
    return res


def main():
    # Read command-line arguments
    parser = argparse.ArgumentParser(
        description="Code Base Investigator " + str(version),
        add_help=False,
    )
    parser.add_argument(
        "-h",
        "--help",
        action="help",
        help="Display help message and exit.",
    )
    parser.add_argument(
        "--version",
        action="version",
        version=f"Code Base Investigator {version}",
        help="Display version information and exit.",
    )
    deprecated_args = parser.add_argument_group("deprecated options")
    deprecated_args.add_argument(
        "-c",
        "--config",
        dest="config_file",
        metavar="<config-file>",
        action="store",
        help="Configuration YAML file. " + "Defaults to config.yaml.",
    )
    parser.add_argument(
        "-v",
        "--verbose",
        dest="verbose",
        action="count",
        default=0,
        help="Increase verbosity level.",
    )
    parser.add_argument(
        "-q",
        "--quiet",
        dest="quiet",
        action="count",
        default=0,
        help="Decrease verbosity level.",
    )
    parser.add_argument(
        "-R",
        "--report",
        dest="reports",
        metavar="<report>",
        action="append",
        default=[],
        choices=["all", "summary", "clustering"],
        help="Generate a report of the specified type. "
        + "May be specified multiple times. "
        + "If not specified, all reports will be generated.",
    )
    deprecated_args.add_argument(
        "-d",
        "--dump",
        dest="dump",
        metavar="<file.json>",
        action="store",
        help="Dump out annotated platform/parsing tree to <file.json>.",
    )
    parser.add_argument(
        "-x",
        "--exclude",
        dest="excludes",
        metavar="<pattern>",
        action="append",
        default=[],
        help="Exclude files matching this pattern from the code base. "
        + "May be specified multiple times.",
    )
    parser.add_argument(
        "-p",
        "--platform",
        dest="platforms",
        metavar="<platform>",
        action="append",
        default=[],
        help="Include the specified platform in the analysis. "
        + "May be specified multiple times. "
        + "If not specified, all platforms will be included.",
    )
    # The analysis-file argument is optional while we support the -c option.
    parser.add_argument(
        "analysis_file",
        metavar="<analysis-file>",
        nargs="?",
        help="TOML file describing the analysis to be performed, "
        + "including the codebase and platform descriptions.",
    )

    args = parser.parse_args()

    stdout_log = logging.StreamHandler(sys.stdout)
    stdout_log.setFormatter(logging.Formatter("[%(levelname)-8s] %(message)s"))
    logging.getLogger("codebasin").addHandler(stdout_log)
    logging.getLogger("codebasin").setLevel(
        max(1, logging.WARNING - 10 * (args.verbose - args.quiet)),
    )

    # Warnings for deprecated functionality with no planned replacement.
    if args.dump:
        warnings.warn(
            "--dump will be removed in a future release.",
            DeprecationWarning,
        )

    # If no specific report was specified, generate all reports.
    # Handled here to prevent "all" always being in the list.
    if len(args.reports) == 0:
        args.reports = ["all"]

    # Determine the root directory based on where codebasin is run.
    rootdir = os.path.realpath(os.getcwd())

    if args.config_file and args.analysis_file:
        raise RuntimeError(
            "Cannot use --config (-c) with TOML analysis files.",
        )

    # If no file is specified, legacy behavior checks for config.yaml
    config_file = args.config_file
    if args.config_file is None and args.analysis_file is None:
        warnings.warn(
            "Implicitly defined configuration files are deprecated.",
            DeprecationWarning,
        )
        config_file = os.path.join(rootdir, "config.yaml")
        if not os.path.exists(config_file):
            raise RuntimeError(f"Could not find config file {config_file}")

    # Set up a default codebase and configuration object.
    codebase = {
        "files": [],
        "platforms": [],
        "exclude_files": set(),
        "exclude_patterns": args.excludes,
        "rootdir": rootdir,
    }
    configuration = {}

    # Load the configuration file if it exists, obeying any platform filter.
    if config_file is not None:
        warnings.warn(
            "YAML configuration files are deprecated. "
            + "Use TOML analysis files instead.",
            DeprecationWarning,
        )
        if not util.ensure_yaml(config_file):
            logging.getLogger("codebasin").error(
                "Configuration file does not have YAML file extension.",
            )
            sys.exit(1)
        codebase, configuration = config.load(
            config_file,
            rootdir,
            exclude_patterns=args.excludes,
            filtered_platforms=args.platforms,
        )

    # Load the analysis file if it exists.
    if args.analysis_file is not None:
        path = os.path.realpath(args.analysis_file)
        if os.path.exists(path):
            if not os.path.splitext(path)[1] == ".toml":
                raise RuntimeError(f"Analysis file {path} must end in .toml.")

        with util.safe_open_read_nofollow(path, "rb") as f:
            try:
                analysis_toml = util._load_toml(f, "analysis")
            except BaseException:
                raise ValueError("Analysis file failed validation")

        if "codebase" in analysis_toml:
            if "exclude" in analysis_toml["codebase"]:
                excludes = analysis_toml["codebase"]["exclude"]
                codebase["exclude_patterns"] += excludes

        for name in args.platforms:
            if name not in analysis_toml["platform"].keys():
                raise KeyError(
                    f"Platform {name} requested on the command line "
                    + "does not exist in the configuration file.",
                )

        for name in analysis_toml["platform"].keys():
            if args.platforms and name not in args.platforms:
                continue
            if "commands" not in analysis_toml["platform"][name]:
                raise ValueError(f"Missing 'commands' for platform {name}")
            p = analysis_toml["platform"][name]["commands"]
            db = config.load_database(p, rootdir)
            codebase["platforms"].append(name)
            configuration.update({name: db})

    # Parse the source tree, and determine source line associations.
    # The trees and associations are housed in state.
    legacy_warnings = True if config_file else False
    state = finder.find(
        rootdir,
        codebase,
        configuration,
        legacy_warnings=legacy_warnings,
    )

    # Count lines for platforms
    platform_mapper = PlatformMapper(codebase)
    setmap = platform_mapper.walk(state)

    if args.dump:
        if util.ensure_json(args.dump):
            report.annotated_dump(args.dump, state)
        else:
            logging.getLogger("codebasin").warning(
                "Output path for annotation dump does not end with .json: "
                f"'{args.dump}'. Skipping dump.",
            )

    def report_enabled(name):
        if "all" in args.reports:
            return True
        return name in args.reports

    # Print summary report
    if report_enabled("summary"):
        summary = report.summary(setmap)
        if summary is not None:
            print(summary)

    # Print clustering report
    if report_enabled("clustering"):
        # Legacy behavior: guess prefix from YAML filename
        if config_file is not None:
            output_prefix = os.path.realpath(guess_project_name(config_file))

        # Modern behavior: append platforms to TOML filename
        else:
            basename = os.path.basename(args.analysis_file)
            filename = os.path.splitext(basename)[0]
            platform_names = [p for p in codebase["platforms"]]
            output_prefix = "-".join([filename] + platform_names)

        clustering_output_name = output_prefix + "-dendrogram.png"
        clustering = report.clustering(clustering_output_name, setmap)
        if clustering is not None:
            print(clustering)

    sys.exit(0)


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logging.getLogger("codebasin").error(str(e))
        sys.exit(1)
